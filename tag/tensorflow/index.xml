<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TensorFlow | Steven Lang</title><link>/tag/tensorflow/</link><atom:link href="/tag/tensorflow/index.xml" rel="self" type="application/rss+xml"/><description>TensorFlow</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate><image><url>/media/icon_hu1e660c1c67a167d0d71efce89dcd67c3_18860_512x512_fill_lanczos_center_2.png</url><title>TensorFlow</title><link>/tag/tensorflow/</link></image><item><title>Deep Feature Interpolation</title><link>/project/deep-feature-interpolation/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>/project/deep-feature-interpolation/</guid><description>&lt;h3 id="description">Description&lt;/h3>
&lt;p>Project on the Implementation of the Deep Feature Interpolation for Image
Content Changes &lt;a href="https://arxiv.org/abs/1611.05507" target="_blank" rel="noopener">paper&lt;/a> in tensorflow together
with &lt;a href="https://www.numerik.mathematik.uni-mainz.de/manfred-faldum/" target="_blank" rel="noopener">Manfred Faldum&lt;/a>.&lt;/p>
&lt;p>The goal of deep feature interpolation is to add a specific target feature to
the face of a person. This may be a Mustache or a smiling mouth. The procedure
starts with taking &lt;code>k&lt;/code> images of people with the feature and &lt;code>k&lt;/code> images of
people without the feature. These sets (positive/negative) are the input to an -
on IMAGENET pretrained - VGG19 network. The output of each image is then fetched
at the Relu layers of the third, fourth and fifth convolutional block. This
builds a deep feature representation of an image. The deep feature vector of the
target feature is then calculated by taking the difference of the mean of the
positive and the negative set. To add the target feature to a new image, the
target feature vector in the deep feature space will be added to the deep
feature representation of this image. The image will then be restored by reverse
mapping the deep feature values into the original pixel space, using an
optimizer of your choice and the following loss function:&lt;/p>
&lt;p>$$
z = argmin_z \frac{1}{2}||\left(\phi\left(x\right) + \alpha w\right) - \phi \left( z \right)||_2^2 + \lambda_{V^\beta} R_{V^\beta}\left(z\right)
$$
$$
R_{V^\beta}\left(z\right) = \sum_{i,j}\left( \left(z_{i,j+1} - z_{i,j}\right)^2 + \left(z_{i+1,j} - z_{i,j}\right)^2 \right)
$$&lt;/p>
&lt;p>Where $z$ is the new image, $x$ is the input image, $\phi$ is the mapping into deep feature space, $\alpha$ is a scalar and $w$ is the deep feature vector of the target feature.&lt;/p></description></item></channel></rss>